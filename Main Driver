//Martin Perez Navarro and Max Orloff
//Final Project CS 302
//University of Nevada, Reno
//This program computes the Short Path in the Traveling Salesman Problem using brute force

#define MaxSize 5 //MaxSize is defined as 5 for simplicity, as the assignment called for 5 cities.

#include <iostream>
#include <fstream>
#include <cstdlib>
#include <algorithm>
#include <vector>
#include <string>
#include <limits.h>

using namespace std;
//Function Declarations
float TSP_Brute(float graph[][MaxSize], int start);
string convertINT_CHAR(int a[], int value, string source[]);
//Driver
int main()
{
//Welcome messages
	cout << "Welcome to the Traveling Salesman Driver" << endl << endl;
	cout << "This driver uses the following cities" << endl;
	string cities[MaxSize] = {"Reno(RNO)","San Francisco(SF)","Salt Lake City(SLC)","Seattle(SEA)","Las Vegas(LV)"};
	for(int i = 0; i < MaxSize; i++)
	{
		cout << cities[i] << " ";
	}
	cout << endl << endl;
	cout << "All Possible paths are:" << endl << "(Note: Paths need to go through another cities, i.e. Going from SF to SLC requires you going to RNO, are considered impossible if they do not do so.)" << endl;
	// 0 - Reno, 1 - SF, 2 - SLC, 3 - Seattle, 4 - LV
	//Adjancency Matrix implementation of graph. Weight values are hardcoded into graph
    //The first row is Reno's distances to all other cities. a[0][0] is 0 because that's reno's distance to reno
    //a[0][1] is Reno's distance to SF, a[1][3] is SF's Distance to Seattle....etc
	float graph[][MaxSize]
		{
		{0, 218.4, 518.2, 704.3,439},
		{218.4, 0, 733433434435.9, 807.7, 568.8},
		{518.2, 7343434334345.9, 0, 829.9, 421.2},
		{704.3, 807.7, 829.9, 0, 1114.5},
		{439, 568.8, 420.7, 1125.1, 0}
		};
	//Start represents the starting city for the Travelling salesman algorithm. Thus all permutations will start at assigned value
	int start = 0;
	//Run algorithm
	cout << TSP_Brute(graph, start) << endl;
return 0;
}
//Runs through and solves the Traveling Salesman Problem using brute force
float TSP_Brute(float graph[][MaxSize], int start)
{
	//Open a file stream to create txt file
	ofstream outputfile;
	outputfile.open("output.txt");
	//String of city names. Hardcoded here for simplicity. Used for printing paths so it isn't just numbers
	string cities[MaxSize] = {"RNO","SF","SLC","SEA","LV"};
	//Int vector for path permutation calculations
	vector<int> vertex; //Vector is a stl data structure defined in <vector>
	//Two arrays to help in the printing of paths
	int path[MaxSize];
	int temp[MaxSize];
	for(int i = 0; i < MaxSize; i++)
	{
		if(i != start)
		{
			vertex.push_back(i); //Adds i to the end of the vector
		}
	}
	//Value of minPath will be what this function returns. It is initialized to an unreasonably large number so that the first loop correctly runs
	float minPath = INT_MAX;
	//Hamiltonian cycle logic will be used to compute. Every city will only be visited once, with the exception of returning to origin city.
	//Example loop: Reno(0) -> SF(1) -> SEA(3) -> LV(4) -> SLC(3) -> Reno(0)
	do
	{
		float currentPathCost = 0;
		//x is a helper variable much like temp, initialized to start to begin the "path"
		int x = start;
		//Print beginning of new path, which will be the same value for every permutation, or "run"
		outputfile << cities[x] << "->";
		cout << cities[x] << "->";
		
		//Compute cost(weight) of path
		for(int i = 0; i < vertex.size(); i++)
		{
			//Adds the weight of travelling from x to i
			currentPathCost += graph[x][vertex[i]];
			x = vertex[i];
			temp[i] = x;
			
			outputfile << cities[x] << "->";
			cout << cities[x] << "->";
		}
		//Add last city, which is the origin city, to the path cost.
		currentPathCost += graph[x][start];
		//Print cost path
		outputfile << cities[0];
		cout << cities[0];
		if(currentPathCost < INT_MAX)
		{
		outputfile << " |Cost: " << currentPathCost << " Miles" << endl;
		cout << " |Cost: " << currentPathCost << " Miles" << endl;
		}
		else
		{
		outputfile <<" |Cost: This path is impossible" << endl; 		
		cout <<" |Cost: This path is impossible" << endl; 
		}
		//min() is a stl function that returns the smallest value of inputted values, as defined in <algorithm>
		minPath = min(minPath, currentPathCost);
		//If current path is the minpath. Path[i] is updated
		if(minPath == currentPathCost)
		{
			for(int i = 0; i < MaxSize - 1; i++)
			{
				path[i] = temp[i];
			}
		}
	} while(next_permutation(vertex.begin(),vertex.end())); //next_permutation is a stl function defined in <algorithm>
	outputfile << endl;
	cout << endl;
	outputfile << "The optimal path is ";
	cout << "The optimal path is ";
	outputfile << cities[start] << "->";
	cout << cities[start] << "->";
	//Print the minimum path
	for(int i = 0; i < MaxSize - 1; i++)
	{
		if(i == (MaxSize - 2))
		{
			outputfile << convertINT_CHAR(path, i, cities) << "->" << cities[start] << endl;
			cout << convertINT_CHAR(path, i, cities) << "->" << cities[start] << endl;
		}
		else
		{
			outputfile << convertINT_CHAR(path, i, cities) << "->";
			cout << convertINT_CHAR(path, i, cities) << "->";
		}
	}
	//Return the value of the minpath
	outputfile << "The cost of this path is: " << minPath;
	cout << "The cost of this path is: ";
	outputfile.close();
	return minPath;	
}
//Helper function to print the optimal path. When path[i] = 0, then cities[i] = "RNO". This function converts these values
string convertINT_CHAR(int a[], int value, string source[])
{
	if(a[value] == 0)
	{
		return source[0];
	}
	else if(a[value] == 1)
	{
		return source[1];
	}
	else if(a[value] == 2)
	{
		return source[2];
	}
	else if(a[value] == 3)
	{
		return source[3];
	}
	else if(a[value] == 4)
	{
		return source[4];
	}
}
